​// ==UserScript==
// @name          Blog Table ⭐
// @namespace    http://tampermonkey.net/
// @version       3.7
// @description  編集画面上にtable表を作成する
// @author        Ameba Blog User
// @match        https://blog.ameba.jp/ucs/entry/srventry*
// @exclude      https://blog.ameba.jp/ucs/entry/srventrylist.do*
// @grant         none
// ==/UserScript==


let retry=0;
let interval=setInterval(wait_target, 100);
function wait_target(){
    retry++;
    if(retry>10){ // リトライ制限 10回 1sec
        clearInterval(interval); }
    let target=document.getElementById('cke_1_contents'); // 監視 target
    if(target){
        clearInterval(interval);
        main(); }}



function main(){
    let ua=0; // Chromeの場合のフラグ
    let agent=window.navigator.userAgent.toLowerCase();
    if(agent.indexOf('firefox') > -1){ ua=1; } // Firefoxの場合のフラグ

    let task=0; // 起動1・作成2・更新3・終了0
    let trim=0; // 追加0・削除1
    let cell_set=0; // セル幅設定パネルの列選択

    let posit_set; // 中央寄せ・左寄せ
    let table_position;
    let border_collapse;
    let add_padd; // td のpadding値
    let layout_fix; // table-layout設定
    let table_border_width;
    let cell_border_width;
    let border_space;
    let left_full; // 左端背景色の優先
    let color_input=[]; // 4個のカラー設定枠
    let setting=[];
    let word_break; // 英文禁則


    if(read_locals()){
        setting=read_locals(); }
    if(setting.length!=18){
        setting=['BlogTable','3','3','0','580','620','0.6','1',' tr:not(:first-child)',
                 '#999','#F4F4F4','#F4F4F4','#FFF','16','auto','break-all','','']; }
    write_locals(setting);


    function read_locals(){
        let read_json=localStorage.getItem('BlogTable'); // ストレージ 保存名
        return JSON.parse(read_json); }

    function write_locals(data){
        let write_json=JSON.stringify(data);
        localStorage.setItem('BlogTable', write_json); } // ストレージ 保存



    let target=document.getElementById('cke_1_contents'); // 監視 target
    let monitor=new MutationObserver( catch_key );
    monitor.observe(target, {childList: true, attributes: true}); // ショートカット待受け開始

    catch_key();

    function catch_key(){
        if(document.querySelector('.cke_wysiwyg_frame') !=null){ //「通常表示」から実行開始
            let editor_iframe=document.querySelector('.cke_wysiwyg_frame');
            let iframe_doc=editor_iframe.contentWindow.document;

            iframe_doc.addEventListener('keydown', check_key);
            document.addEventListener('keydown', check_key);

            function check_key(event){
                if(event.keyCode==13 && iframe_doc.hasFocus()){
                    remove_mark(); } // 改行入力が連続マークとなるのを抑止

                let gate=-1;
                if(event.ctrlKey==true){
                    if(event.keyCode==112){
                        event.preventDefault(); gate=1; }
                    if(gate==1){
                        event.stopImmediatePropagation();
                        do_task(); }}}

            function do_task(){
                if(task==0){
                    task=1;
                    table_panel();
                    enhanced(); }
                else{
                    task=0;
                    remove_t_panel();
                    remove_mark_all(); }}}

        before_end();

    } // catch_key()



    function table_panel(){

        let panel=
            '<div id="t_panel">'+
            '<span class="t_label">構成</span>'+
            '<div class="wnc"><input id="col" type="number" min="1"></div>'+
            '<div class="wnr"><input id="row" type="number" min="1"></div>'+
            '<span class="t_label">配置</span>'+
            '<input id="wide" type="submit" value="　">'+
            '<span class="t_label">表幅</span>'+
            '<div class="wpxt"><input id="t_width" type="number" min="10" max="1000"></div>'+
            '<input id="t_width_m" type="submit" value="м">'+
            '<input id="td_padd" type="submit" value="　">'+
            '<input id="equal" type="submit" value="　">'+
            '<span class="t_label">枠線</span>'+
            '<div class="wpx"><input id="border_width" type="number" min="-9"></div>'+
            '<input id="border_color" type="text" autocomplete="off">'+
            '<span class="t_label">最上行背景</span>'+
            '<input id="header_back" type="text" autocomplete="off">'+
            '<span class="t_label">左端列背景</span>'+
            '<input id="left_back" type="text" autocomplete="off">'+
            '<input id="left_back_f" type="submit" value="▲">'+
            '<span class="t_label">全体背景</span>'+
            '<input id="cell_back" type="text" autocomplete="off">'+
            '<span class="t_label">文字</span>'+
            '<div class="wpx"><input id="t_font" type="number" min="12" max="32"></div>'+
            '<input id="copy" type="submit" value="C">'+
            '<input id="set" type="submit" value="　">'+
            '<span id="test"></span>'+

            '<div id="first">'+
            '<span id="bt_help">？</span>'+
            '<div class="bt_help1">'+
            '表を作成する場所 / 更新する表を<b>「Ctrl+左Click」</b>で指定してください</div>'+
            '<div class="bt_help2">'+
            'TRIM処理：左端列・最上行を<b>「Alt+左Click」</b>して 削除する列・行'+
            '（追加の場合は後方の列・行）を指定してください</div>'+
            '<div class="bt_help3">'+
            '<input class="trim_close" type="submit" value="✖">'+
            'TRIM操作の選択'+
            '<input id="trim_add" type="submit" value="追加">'+
            '<input id="trim_rem" type="submit" value="削除">　➡　'+
            '<input id="trim_do" type="submit" value="実行">'+
            '<input id="trim_cancel" type="submit" value="中止">'+
            '赤ラインの位置にTRIM処理を実行します</div>'+

            '<div class="bc_help4">'+
            '<input id="col_close" type="submit" value="✖">'+
            '表幅'+
            '<div class="wpx wpxw lock">'+
            '<input id="table_width" type="number"></div>'+
            '列幅指定'+
            '<div class="wpx wpxw">'+
            '<input id="col_width" type="number" min="0" max="1000"></div>'+
            '列選択'+
            '<input id="col_l" type="submit" value="⇦">'+
            '<input id="col_r" type="submit" value="⇨">'+
            '<span class="w_reset">等幅指定</span>'+
            '<input id="specified" type="button" value="　">'+
            '<span class="w_reset">英文禁則</span>'+
            '<input id="word_b" type="button" value="No">'+
            '<span class="w_reset">初期化</span>'+
            '<input id="to_auto" type="button" value="Auto">'+
            '</div></div>'+

            '<style>'+
            '#t_panel { position: fixed; top: 15px; left: calc(50% - 490px); width: 954px; '+
            'font-size: 14px; padding: 6px 12px; overflow: hidden; '+
            'border: 1px solid #ccc; border-radius: 4px; background: #eff5f6; z-index: 10; }'+
            '#t_panel * { user-select: none; }'+
            '#t_panel input { position: relative; margin-right: 10px; padding-top: 2px; '+
            'height: 27px; box-sizing: border-box; border: thin solid #aaa; }'+
            '#t_panel input[type="number"] { padding-right: 2px; margin-right: 0; }'+
            '#t_panel input[type="number"]:focus, #t_panel input[type="submit"]:focus '+
            '{ box-shadow: none; }'+
            '.t_label { margin: 0 3px 0 0; }'+

            '#col, #row { width: 40px; text-align: center; }'+
            '#wide { width: 30px; letter-spacing: -0.5em; text-indent: -6px; }'+
            '#t_width { width: 54px; text-align: center; }'+
            '#t_width_m { margin-left: -9px; width: 14px; }'+
            '#td_padd { width: 30px; margin-left: 2px; }'+
            '#equal { width: 34px; }'+
            '#border_width { width: 40px; text-align: center; }'+
            '#left_back_f { margin-left: -9px; width: 14px; text-indent: -1px; }'+
            '#t_font { width: 40px; text-align: center; }'+
            '#wide, #t_width_m, #td_padd, #equal, #left_back_f { background: #fff; }'+

            '.wnc, .wnr, .wpx, .wpxt { position: relative; display: inline-block; }'+
            '.wnc { margin-right: 2px; }'+
            '.wnr, .wpx, .wpxt { margin-right: 10px; }'+
            '.wnc::after { content: "列"; }'+
            '.wnr::after { content: "行"; }'+
            '.wpx::after, .wpxt::after { content: "px"; }'+
            '.wnc::after, .wnr::after, .wpx::after, .wpxt::after { position: absolute; right: 2px; '+
            'top: 2px; padding: 3px 0 0; width: 17px; background: #fff; }'+
            '.wpx:hover::after, .wpxt:hover::after, .wnc:hover::after, .wnr:hover::after '+
            '{ content: ""; }'+
            '.wpxt.lock { pointer-events: none; background: #80deea; }'+
            '.wpxt.lock::after { background: inherit; }'+
            '.wpxt.lock #t_width { background: inherit; }'+
            '#t_width_m.lock { pointer-events: none; background: #80deea !important; }'+

            '#border_color { margin-left: -9px; }'+
            '#border_color, #header_back, #left_back, #cell_back { '+
            'width: 0; padding: 2px 16px 0 0; cursor: pointer; }'+
            '#border_color:focus, #header_back:focus, #left_back:focus, #cell_back:focus { '+
            'width: 99px; margin-right: -71px; padding: 2px 0 0 22px; z-index: 1; cursor: text; }'+

            '#copy { margin: 0 !important; padding: 2px 4px 0; font-weight: bold; '+
            'color: #fff; background: #1976d2; visibility: hidden; }'+
            '#set { margin: 0 !important; padding: 2px 4px 0; float: right; }'+
            '#set:hover, #copy:hover { background: #fff; color: #000; }'+
            '#set { background: #1976d2; color: #fff; }'+

            '#first { position: absolute; top: 0; left: 0; color: #fff; background: #2196f3; '+
            'width: 100%; padding: 10px 0; font-size: 16px; text-align: center; }'+
            '#bt_help { position: absolute; top: 11px; right: 25px; padding: 2px 1px 0; '+
            'line-height: 16px; font-weight: bold; border-radius: 30px; '+
            'color: #2196f3; background: #fff; cursor: pointer; }'+
            '.bt_help1 { text-align: left; margin-left: 60px; }'+
            '.bt_help2 { text-align: left; margin-left: 50px; }'+
            '.bt_help3 { text-align: left; margin: -3px 20px; }'+
            '.bt_help3 input { font: normal 15px/15px Meiryo; height: 26px !important; '+
            'padding: 2px 6px 0; color: #333; text-shadow: 0.5px 0 0.6px #666; '+
            'border: none !important; border-radius: 3px; }'+
            '.trim_close { margin-right: 30px !important; }'+
            '#trim_add { margin-left: 15px; }'+
            '#trim_cancel { margin-right: 30px !important; }'+

            '.bc_help4 { text-align: left; margin: -4px 20px; }'+
            '.bc_help4 input { color: #000; background: #fff; border-radius: 3px; }'+
            '.bc_help4 #col_close { margin-right: 30px !important; }'+
            '.bc_help4 #specified { width: 18px; height: 18px; vertical-align: -6px; '+
            'border: 2px solid #fff; background: #fff; }'+
            '.bc_help4 .wpx.wpxw { margin: 0 30px 0 10px; color: #000; }'+
            '.bc_help4 .wpxw::after { right: 6px; padding-top: 1px; width: 20px; }'+
            '.bc_help4 .wpxw.lock { pointer-events: none; }'+
            '.bc_help4 #table_width, .bc_help4 #col_width { padding: 3px 6px 0 !important; '+
            'margin: 0; width: 72px; height: 27px; text-align: center; border: none; }'+
            '.bc_help4 #col_close, .bc_help4 #col_l, .bc_help4 #col_r, .bc_help4 #to_auto, '+
            '.bc_help4 #word_b { '+
            'padding: 2px 6px 0; margin-right: 12px; height: 26px; border: none; }'+
            '.bc_help4 #col_l { margin-left: 10px; }'+
            '.bc_help4 .w_reset { margin: 0 6px 0 20px; }'+
            '.bc_help4 #word_b { width: 40px; }'+

            '#test { display: none; }'+
            '#cke_42 { top: 60px !important; left: calc( 50% - 45px) !important; }';

        if(ua==1){
            panel +=
                '.wpx::after, .wpxt::after { padding: 3px 1px 0; }'+
                '.wnc::after { padding: 3px 1px 0; }'+
                '.wnr::after { padding: 3px 1px 0; }'; }

        panel +=
            '</style>'+
            '</div>';

        if(!document.querySelector('#t_panel')){
            document.body.insertAdjacentHTML('beforeend', panel); }

    } // table_panel()



    function enhanced(){
        let target_r=document.getElementById('cke_1_contents'); // 監視 target
        let monitor_r=new MutationObserver(select);
        monitor_r.observe(target_r, {childList: true}); // ショートカット待受け開始

        select();

        function select(){
            if(document.querySelector('.cke_wysiwyg_frame') !=null){ //「通常表示」から実行開始
                remove_mark_all(); // Html編集後のリセット
                show_first(1);
                let editor_iframe=document.querySelector('.cke_wysiwyg_frame');
                let iframe_doc=editor_iframe.contentWindow.document;
                if(iframe_doc){
                    let style_if=
                        '<style id="style_if">'+
                        '.amb_active { box-shadow: #fff -4px 0px, #2196f3 -8px 0px !important; }'+
                        '.trimr_active { box-shadow: 0 -3px 0 red, inset 0 2px 0 red; }'+
                        '.trimd_active { box-shadow: -3px 0 red, inset 2px 0 0 red; }'+
                        '.trim_active { box-shadow: inset 0 0 0 50px rgba(255, 0, 0, 0.6); }'+
                        '.col_active { box-shadow: inset 0 4px 0 #2196f3; }'+
                        '</style>';

                    if(!iframe_doc.head.querySelector('#style_if')){
                        iframe_doc.head.insertAdjacentHTML('beforeend', style_if); }

                    let editor=iframe_doc.querySelector('.cke_editable');
                    if(editor){
                        editor.onclick=function(event){
                            event.stopImmediatePropagation();

                            if(event.ctrlKey){
                                remove_mark_all();
                                if(task==1 || task==2 || task==3 || task==4){
                                    let elm=iframe_doc.elementFromPoint(event.clientX, event.clientY);

                                    if(elm.closest('table')!=null){
                                        let table_id=elm.closest('table').id;
                                        if(table_id && table_id.includes('ambt')){
                                            if(iframe_doc.querySelector('.'+ table_id)){
                                                remove_mark();
                                                setTimeout(()=>{
                                                    alert(
                                                        " ⛔ 軽量タイプの表は、このバージョンの 「Blog Table」"+
                                                        "では\n　　更新ができません。\n　　"+
                                                        "この表を更新するには ver.4.0 以降を使用してください。");
                                                },20 );}
                                            else{
                                                elm.closest('table').parentNode.classList.add('amb_active');
                                                show_first(0);
                                                task=3;
                                                edit_table(task, elm.closest('table')); }}} //「表更新」

                                    else{
                                        if(elm.tagName=='P' || elm.tagName=='DIV'){
                                            elm.classList.add('amb_active');
                                            show_first(0);
                                            task=2;
                                            edit_table(task, 0); }}}} //「表作成」

                            if(event.altKey){
                                remove_mark_all();
                                if(task==1 || task==2 || task==3 || task==4){
                                    let elm=iframe_doc.elementFromPoint(event.clientX, event.clientY);

                                    if(elm.closest('table')!=null){
                                        let selectTr;
                                        let selectTd;
                                        let Table=elm.closest('table');
                                        Table.parentNode.classList.add('amb_active');

                                        let Tr=elm.closest('tr');
                                        let allTR=Table.querySelectorAll('tr');
                                        for(let k=0; k<allTR.length; k++){
                                            if(Tr==allTR[k]){
                                                selectTr=k; } // 選択した行
                                            let Td=elm.closest('td');
                                            let allTd=allTR[k].querySelectorAll('td');
                                            for(let k=0; k<allTd.length; k++){
                                                if(Td==allTd[k]){
                                                    selectTd=k; }}} // 選択した列

                                        if((selectTr>0 && selectTd==0) || (selectTr==0 && selectTd>0)){
                                            trim_table(Table, selectTr, selectTd); }
                                        else{
                                            remove_mark_trim();
                                            show_first(2); }}
                                    else{
                                        remove_mark_trim();
                                        show_first(2); }}} //「表更新」列・行の修正

                        }}}}} // select()

    } // enhanced()



    function trim_table(trim_Table, R, D){
        show_first(3);
        trim_select();

        if(trim==0){
            if(D==0){ // 行追加処理
                let allTr=trim_Table.querySelectorAll('tr');
                let allTd=allTr[R].querySelectorAll('td');
                for(let k=0; k<allTd.length; k++){
                    trim_color(0, 'r_mark', allTd[k]); }
                trim_action(trim_Table, 1, R, D); }

            if(R==0){ // 列追加処理
                let allTr=trim_Table.querySelectorAll('tr');
                for(let k=0; k<allTr.length; k++){
                    let allTd=allTr[k].querySelectorAll('td');
                    trim_color(0, 'd_mark', allTd[D]); }
                trim_action(trim_Table, 2, R, D); }}

        if(trim==1){
            if(D==0){ // 行削除処理
                let allTr=trim_Table.querySelectorAll('tr');
                let allTd=allTr[R].querySelectorAll('td');
                for(let k=0; k<allTd.length; k++){
                    trim_color(1, 'r_mark', allTd[k]); }
                trim_action(trim_Table, 3, R, D); }

            if(R==0){ // 列削除処理
                let allTr=trim_Table.querySelectorAll('tr');
                for(let k=0; k<allTr.length; k++){
                    let allTd=allTr[k].querySelectorAll('td');
                    trim_color(1, 'd_mark', allTd[D]); }
                trim_action(trim_Table, 4, R, D); }}


        let trim_close=document.querySelector('.trim_close');
        if(trim_close){
            trim_close.onclick=function(){
                remove_mark_trim();
                edit_table(3, trim_Table);
                show_first(0); }}

    } // trim_table()



    function trim_select(){
        let trim_add=document.querySelector('#trim_add');
        let trim_rem=document.querySelector('#trim_rem');
        if(trim_add && trim_rem){
            trim_set();

            trim_add.onclick=function(){
                if(trim==1){
                    trim=0;
                    trim_set(); }}

            trim_rem.onclick=function(){
                if(trim==0){
                    trim=1;
                    trim_set(); }}

            function trim_set(){
                remove_mark_trim();
                if(trim==0){
                    trim_add.style.background='#fff';
                    trim_rem.style.background='#95c3e8'; }
                else{
                    trim_add.style.background='#95c3e8';
                    trim_rem.style.background='#fff'; }}}

    } // trim_select()



    function trim_color(n, mark, cell){
        if(n==0){
            if(mark=='r_mark'){ // 行追加の表示
                cell.classList.add('trimr_active'); }
            if(mark=='d_mark'){ // 列追加の表示
                cell.classList.add('trimd_active'); }}
        if(n==1){ // 削除の表示
            cell.classList.add('trim_active'); }}



    function trim_action(trim_Table, type, R, D){
        let trim_do=document.querySelector('#trim_do');
        let trim_cancel=document.querySelector('#trim_cancel');

        trim_do.onclick=function(){
            if(type==1){
                add_tr(trim_Table, R); }
            if(type==2){
                add_td(trim_Table, D); }
            if(type==3){
                rem_tr(trim_Table, R); }
            if(type==4){
                rem_td(trim_Table, D); }

            if(layout_fix=='fixed'){
                let t_width=document.querySelector('#t_width'); // 表全幅の設定
                trim_Table.style.width=''; // 表幅リセット
                let t_width_g=getComputedStyle(trim_Table).width;
                if(t_width_g){
                    t_width.value=Math.ceil((t_width_g.replace('px', ''))); } // 切り上げ
                else{
                    t_width.value=580; }
                trim_Table.style.width= t_width.value+'px'; }

            edit_table(3, trim_Table);
            show_first(0); }


        trim_cancel.onclick=function(){
            remove_mark_trim();
            edit_table(3, trim_Table);
            show_first(0); }


        function add_tr(trim_Table, R){
            let allTr=trim_Table.querySelectorAll('tr');
            let clone_tr=allTr[R].cloneNode(true);
            let allTd=clone_tr.querySelectorAll('td');
            for(let k=0; k<allTd.length; k++){
                allTd[k].textContent=''; }
            allTr[R].parentNode.insertBefore(clone_tr, allTr[R]);
            remove_mark_trim(); }


        function add_td(trim_Table, D){
            let allTr=trim_Table.querySelectorAll('tr');
            for(let k=0; k<allTr.length; k++){
                let refer_td=allTr[k].querySelectorAll('td')[D]
                let clone_td=refer_td.cloneNode(true);
                clone_td.textContent='';
                allTr[k].insertBefore(clone_td, refer_td); }
            remove_mark_trim(); }


        function rem_tr(trim_Table, R){
            let allTr=trim_Table.querySelectorAll('tr');
            allTr[R].remove(); }


        function rem_td(trim_Table, D){
            let allTr=trim_Table.querySelectorAll('tr');
            for(let k=0; k<allTr.length; k++){
                allTr[k].querySelectorAll('td')[D].remove(); }}

    } // trim_action()



    function pick_color(){
        let set_color;
        let color_input_selector;
        let color_label;
        let icon_button;

        if(ua==0){
            color_label=document.querySelector('#cke_16_label');
            icon_button=document.querySelector('#cke_17'); }
        else if(ua==1){
            color_label=document.querySelector('#cke_15_label');
            icon_button=document.querySelector('#cke_16'); }

        let target_p=color_label; // 監視 アイコンのカラーラベル
        let monitor_p=new MutationObserver(get_copy);

        color_input=document.querySelectorAll('#t_panel input[type="text"]');
        for(let k=0; k<color_input.length; k++){
            input_color(k); }



        function input_color(k){
            let trust_color;

            color_input[k].onmousedown=function(event){ // 🟡
                if(event.ctrlKey==true){
                    event.preventDefault();
                    event.stopImmediatePropagation(); // 🟡
                    for(let i=0; i<color_input.length; i++){ // 他のinputの表示をリセット
                        color_input[i].style.outline=''; }
                    color_input_selector=k;
                    color_input[k].style.outline='2px solid #2196f3'; // 対象カラーinputを表示
                    icon_button.click();
                    monitor_p.observe(target_p, {attributes: true}); }
                else if(event.shiftKey==true){
                    event.preventDefault();
                    color_input_selector=k;
                    if(test_colorE(hex_bright(color_input[k].value))){
                        color_input[k].value=hex_bright(color_input[k].value); // 明度を上げる
                        sticky_color(color_input[k]); }}

            } // アイコンカラー取得開始



            color_input[k].addEventListener('change', function(event){
                event.preventDefault();
                if(test_colorE(color_input[k].value)){
                    color_input[k].value=hex_8_6(trust_color);
                    sticky_color(color_input[k]); }
                else{
                    if(color_input[k].value==''){
                        color_input[k].style.boxShadow='inset 0 0 0 1px black'; }
                    else{
                        color_input[k].style.boxShadow='inset 0 0 0 1px black'; // 担保コード
                        color_input[k].style.boxShadow=
                            'inset 0 0 0 1px black, inset 17px 0 ' + color_input[k].value+
                            ', inset 18px 0 #aaa'; }}});



            function test_colorE(color){
                let test=document.querySelector('#test');
                test.style.color='#000001';
                if(color!=''){
                    test.style.color=color; } // 入力枠が空の場合はNG判定
                let colorR=window.getComputedStyle(test).color;
                if(colorR){
                    trust_color=rgb_hex(colorR); // 適正値を6桁16進で返す

                    if(colorR!='rgb(0, 0, 1)'){
                        return true; } // 正常な色
                    else{
                        if(color=='rgb(0, 0, 1)' || color=='#000001' || color=='#000001ff'){
                            return true; } //「#000001」をテストした場合は 例外処理
                        else{
                            return false; }}}
                else{
                    return false; }}

        } // input_color()



        document.addEventListener('mousedown', function(){ // 🟡
            if(color_input[color_input_selector]){
                color_input[color_input_selector].style.outline='none'; }
            monitor_p.disconnect(); }); // カラー取得終了



        if(document.querySelector('.cke_wysiwyg_frame') !=null){
            let editor_iframe=document.querySelector('.cke_wysiwyg_frame');
            let iframe_doc=editor_iframe.contentWindow.document;
            iframe_doc.addEventListener('mousedown', function(){ // 🟡
                if(color_input[color_input_selector]){
                    color_input[color_input_selector].style.outline='none'; }
                monitor_p.disconnect(); }); } // カラー取得終了



        function get_copy(){
            set_color=color_label.getAttribute('data-color');
            color_input[color_input_selector].value='#'+ set_color;
            sticky_color(color_input[color_input_selector]);
            color_input[color_input_selector].style.outline='none';

            monitor_p.disconnect(); } // カラー取得終了



        let target_body=document.querySelector('.l-body'); // 監視 target
        let monitor_generator=new MutationObserver(stealth);
        monitor_generator.observe(target_body, {childList: true, subtree: true});

        function stealth(){
            let color_generator=document.querySelector('.ck-l-colorGenerator');
            if(color_generator){
                color_generator.addEventListener('mousedown', function(event){ // 🟡
                    event.stopImmediatePropagation(); }); }}

    } // pick_color()



    function table_position_set(){
        let wide=document.querySelector('#wide'); // 中央配置・左寄せの設定
        if(posit_set==0){
            wide.value='　▢　';
            table_position='0 auto'; }
        else if(posit_set==1){
            wide.value='▢　　';
            table_position='0 auto 0 0'; }

        wide.onclick=function(event){
            event.preventDefault();
            if(posit_set==0){
                posit_set=1;
                wide.value='▢　　';
                table_position='0 auto 0 0'; }
            else if(posit_set==1){
                posit_set=0;
                wide.value='　▢　';
                table_position='0 auto'; }}}



    function t_width_lock(r_table){
        let count=0;
        let top_td=r_table.querySelectorAll('tr:first-child td');
        for(let k=0; k<top_td.length; k++){
            if(top_td[k].style.width){
                count+=1; }}
        if(count>0){
            table_lock(1); }
        else{
            table_lock(0); }}


    function table_lock(n){
        let wpxt=document.querySelector('.wpxt'); // 表幅
        let t_width_m=document.querySelector('#t_width_m'); // MEMO
        if(n==0){
            wpxt.classList.remove('lock');
            t_width_m.classList.remove('lock'); }
        else{
            wpxt.classList.add('lock');
            t_width_m.classList.add('lock'); }}



    function table_width_memo(){
        let t_width=document.querySelector('#t_width'); // 表全幅の設定
        let t_width_m=document.querySelector('#t_width_m'); // 表のデフォルト幅の登録
        t_width_m.onclick=function(event){
            if(event.ctrlKey==false){
                event.preventDefault();
                t_width.value=setting[5]; // MEMO値を呼出して設定
                t_width_m.style.background='#00afff';
                setTimeout(()=>{
                    t_width_m.style.background='#fff';
                    t_width_m.style.transition='1s'; }, 2000);
                setTimeout(()=>{
                    t_width_m.style.transition='0s'; }, 3000); }

            else if(event.ctrlKey==true){
                let yes=window.confirm("　🔵 現在の「表幅」を「MEMO値」に登録します");
                if(yes){
                    setting[5]=t_width.value;
                    write_locals(setting); }}}} // ストレージ保存



    function td_padding_set(){
        let td_padd=document.querySelector('#td_padd'); // tdの横padding 有無の設定
        if(add_padd==0){
            td_padd.value='p0';
            td_padd.style.boxShadow='none'; }
        else{
            td_padd.value='p+';
            td_padd.style.boxShadow='inset 6px 0 0 #cefed0, inset -6px 0 0 #cefed0'; }

        td_padd.onclick=function(event){
            event.preventDefault();
            if(add_padd==0){
                add_padd=0.6;
                td_padd.value='p+';
                td_padd.style.boxShadow='inset 6px 0 0 #cefed0, inset -6px 0 0 #cefed0'; }
            else{
                add_padd=0;
                td_padd.value='p0';
                td_padd.style.boxShadow='none'; }}}



    function lafix_set(task, r_table){
        let equal=document.querySelector('#equal'); // table-layout の設定
        if(layout_fix=='fixed'){
            equal.value='Fix';
            equal.style.background='#80deea'; }
        else{
            layout_fix='auto';
            equal.value='Auto';
            equal.style.background='#fff'; }

        equal.onclick=function(event){
            event.preventDefault();
            if(event.ctrlKey){
                if(task==3){
                    reset_width(r_table, 0); }}
            else{
                if(task==3){
                    task=4;
                    manu_width(r_table); }
                else{
                    if(layout_fix=='auto'){
                        layout_fix='fixed';
                        equal.value='Fix';
                        equal.style.background='#80deea'; }
                    else{
                        layout_fix='auto';
                        equal.value='Auto';
                        equal.style.background='#fff'; }}}}}


    function manu_width(r_table){
        let bc_help4=document.querySelector('.bc_help4');
        let col_close=document.querySelector('#col_close');
        let table_width=document.querySelector('#table_width');
        let col_width=document.querySelector('#col_width');
        let col_l=document.querySelector('#col_l');
        let col_r=document.querySelector('#col_r');
        let specified=document.querySelector('#specified');
        let word_b=document.querySelector('#word_b');
        let to_auto=document.querySelector('#to_auto');

        show_first(4);
        spec_disp(1);

        let top_td=r_table.querySelectorAll('tr:first-child td');
        set_fix();
        layout_fix='fixed';
        r_table.style.tableLayout='fixed';

        if(!top_td[cell_set]){
            cell_set=0; }

        top_td[cell_set].classList.add('col_active');
        col_w_set(top_td[cell_set]);


        col_l.onclick=function(){
            top_td[cell_set].classList.remove('col_active');
            if(cell_set==0){
                cell_set=top_td.length -1; }
            else{
                cell_set -=1; }
            top_td[cell_set].classList.add('col_active');
            col_w_set(top_td[cell_set]); }

        col_r.onclick=function(){
            top_td[cell_set].classList.remove('col_active');
            if(cell_set==top_td.length -1){
                cell_set=0; }
            else{
                cell_set +=1; }
            top_td[cell_set].classList.add('col_active');
            col_w_set(top_td[cell_set]); }


        function col_w_set(col){
            let col_w=getComputedStyle(col).width;
            col_width.value=parseInt((col_w.replace('px', '')), 10);

            col_width.oninput=function(){
                col.style.width=col_width.value + 'px';
                set_fix(); }

            specified.onclick=function(){
                all_set(0);
                spec_disp(0);
                setTimeout(()=>{
                    all_set(1);
                    let col_w=getComputedStyle(col).width;
                    col_width.value=parseInt((col_w.replace('px', '')), 10);
                }, 200);
                setTimeout(()=>{
                    spec_disp(1);
                }, 600); }}


        if(word_break=='break-all'){
            word_b.value='No'; }
        else if(word_break=='break-word'){
            word_b.value='Yes'; }
        else{
            word_b.value='---'; }
        r_table.style.wordBreak=word_break;

        word_b.onclick=function(){
            if(word_b.value=='No'){
                word_break='break-word';
                word_b.value='Yes'; }
            else if(word_b.value=='Yes'){
                word_break='unset';
                word_b.value='---'; }
            else{
                word_break='break-all';
                word_b.value='No'; }
            r_table.style.wordBreak=word_break;
            set_fix(); }


        to_auto.onclick=function(){
            reset_width(r_table, 1); }


        function set_fix(){
            all_set(1);
            r_table.style.width='';

            let r_table_width=getComputedStyle(r_table).width;
            if(r_table_width){
                table_width.value=Math.ceil((r_table_width.replace('px', ''))); } // 切り上げ
            else{
                table_width.value=580; }
            r_table.style.width=table_width.value+'px'; }


        function all_set(n){
            for(let k=0; k<top_td.length; k++){
                if(n==0){
                    if(top_td[k].style.width){
                        top_td[k].style.width=''; }}
                else{
                    let set_w=getComputedStyle(top_td[k]).width;
                    if(set_w && !top_td[k].style.width){
                        top_td[k].style.width=set_w; }}}}


        function spec_disp(n){
            if(n==0){
                specified.style.background='#fff'; }
            else{
                specified.style.background='#29b6f6'; }}


        col_close.onclick=function(){
            task=3;
            remove_mark_col();
            show_first(0);
            edit_table(3, r_table); }

    } // manu_width()



    function reset_width(r_table, n){
        if(layout_fix=='fixed'){
            let yes=window.confirm(
                "　🔴　表のレイアウトモードを「Fix」から「Auto」に変更します。\n"+
                "　　　 現在の表幅のままで、列幅の調整が初期化されます。\n"+
                "　　　「OK」を押すと、初期化を実行します。");
            if(yes){
                let equal=document.querySelector('#equal'); // table-layout の設定
                layout_fix='auto';
                r_table.style.tableLayout='auto';
                equal.value='Auto';
                equal.style.background='#fff';

                let top_td=r_table.querySelectorAll('tr:first-child td');
                for(let k=0; k<top_td.length; k++){
                    if(top_td[k].style.width){
                        top_td[k].style.width=''; }}

                t_width_lock(r_table);

                if(n==1){ // セル幅の設定パネルの場合
                    task=3;
                    remove_mark_col();
                    show_first(0);
                    edit_table(3, r_table); }
            }}}



    function table_border_set(){
        let border_width=document.querySelector('#border_width'); // 枠線幅の設定
        two_way();

        border_width.addEventListener('input', function(event){
            event.preventDefault();
            two_way(); });

        function two_way(){
            if(border_width.value>-1){
                border_collapse='collapse';
                table_border_width='0';
                cell_border_width=border_width.value;
                border_space=0; }
            else if(border_width.value<0){
                border_collapse='separate';
                table_border_width='1';
                cell_border_width=1;
                border_space=border_width.value*(-1); }}}



    function left_full_set(){
        let left_back_full=document.querySelector('#left_back_f'); // 左端色を最上行まで設定
        if(left_full==' tr:not(:first-child)'){
            left_back_full.style.color='#aaa';
            left_back_full.style.boxShadow='none'; }
        else{
            left_back_full.style.color='red';
            left_back_full.style.boxShadow='inset 0 5px red'; }

        left_back_full.onclick=function(event){
            event.preventDefault();
            if(left_full==' tr:not(:first-child)'){
                left_full=' tr';
                left_back_full.style.color='red';
                left_back_full.style.boxShadow='inset 0 5px red'; }
            else{
                left_full=' tr:not(:first-child)';
                left_back_full.style.color='#aaa';
                left_back_full.style.boxShadow='none'; }}}



    function show_color(){
        color_input=document.querySelectorAll('#t_panel input[type="text"]');
        for(let k=0; k<color_input.length; k++){
            color_input[k].value=setting[k+9];
            sticky_color(color_input[k]); }}


    function sticky_color(box){
        box.style.boxShadow='inset 17px 0 '+ box.value +', inset 18px 0 #aaa'; }



    function edit_table(task, r_table){
        let editor_iframe=document.querySelector('.cke_wysiwyg_frame');
        let iframe_doc=editor_iframe.contentWindow.document;

        let this_col; // 更新前の列数
        let this_row; // 更新前の行数
        let col=document.querySelector('#col'); // 列数の設定
        let row=document.querySelector('#row'); // 行数の設定
        let t_width=document.querySelector('#t_width'); // 表全幅の設定
        let border_width=document.querySelector('#border_width'); // 枠線幅の設定
        let border_color=document.querySelector('#border_color'); // 枠線色の設定
        let header_back=document.querySelector('#header_back'); // 最上行背景色の設定
        let left_back=document.querySelector('#left_back'); // 左端行背景色の設定
        let cell_back=document.querySelector('#cell_back'); // 全体背景色の設定
        let t_font=document.querySelector('#t_font'); // 文字サイズの設定
        let copy=document.querySelector('#copy'); // コピーボタン
        let set=document.querySelector('#set'); // 作成ボタン


        if(task==2){
            set.value='表作成';
            copy.style.visibility='hidden';
            table_lock(0);
            table_create(); }
        else if(task==3){
            set.value='表更新';
            copy.style.visibility='visible';
            copy_table();
            table_renew(r_table); }



        function table_create(){
            setting=read_locals();

            col.value=setting[1];
            row.value=setting[2];
            posit_set=setting[3];
            table_position_set();
            t_width.value=setting[4];
            table_width_memo();
            add_padd=setting[6];
            td_padding_set();
            layout_fix=setting[14];
            lafix_set(2, 0);
            border_width.value=setting[7];
            table_border_set();
            left_full=setting[8];
            left_full_set();
            show_color(); // inputにストレージ値をセット [9][10][11][12]
            pick_color();
            t_font.value=setting[13];
            word_break=setting[15];



            set.onclick=function(event){
                if(task==2){
                    let n_table=iframe_doc.createElement("table");
                    let rows=[];
                    for(let i=0; i<row.value; i++){
                        rows.push(n_table.insertRow(-1)); // 行の追加
                        for(let j=0; j<col.value; j++){
                            let cell=rows[i].insertCell(-1);
                            cell.appendChild(iframe_doc.createTextNode('')); }} // 列の追加

                    let table_id=new_table_id();
                    n_table.setAttribute('id', table_id);
                    n_table.setAttribute('style', set_css());

                    let scroll_container=iframe_doc.createElement('div');
                    scroll_container.setAttribute('style', 'overflow-x: auto');

                    let selection=iframe_doc.getSelection();
                    let range=selection.getRangeAt(0);
                    let ac_node=selection.anchorNode;

                    ac_node.parentNode.insertBefore(scroll_container, ac_node);
                    scroll_container.appendChild(n_table);

                    let cn_table=iframe_doc.querySelector('#'+ table_id);

                    let first_tr=cn_table.querySelectorAll('tr')[0];
                    if(first_tr){
                        first_tr.style.backgroundColor=header_back.value; }

                    let left_td=cn_table.querySelectorAll(left_full +' td:first-child');
                    for(let k=0; k<left_td.length; k++){
                        left_td[k].style.backgroundColor=left_back.value; }

                    let all_td=cn_table.querySelectorAll('td');
                    for(let k=0; k<all_td.length; k++){
                        all_td[k].style.border=cell_border_width +'px solid '+ border_color.value;
                        all_td[k].style.padding='0.2em '+ add_padd +'em 0';
                        all_td[k].style.height='1.5em'; }


                    task=3;
                    remove_mark(); // 選択表示を整形
                    show_first(0);
                    cn_table.parentNode.classList.add('amb_active');
                    edit_table(3, cn_table)

                }} // set.onclick

        } // table_create



        function table_renew(r_table){
            pick_color();
            table_width_memo();
            t_width_lock(r_table);

            let t_tr=r_table.querySelectorAll('tr');
            row.value=t_tr.length;

            let t_td=r_table.querySelectorAll('td');
            col.value=t_td.length / t_tr.length;

            let margin_g=r_table.style.margin;
            if(margin_g && margin_g.includes('0px auto 0px 0px')){
                posit_set=1; }
            else {
                posit_set=0; }
            table_position_set();

            let t_width_g=r_table.style.width;
            if(t_width_g){
                t_width.value=t_width_g.replace(/[^0-9]/g, ''); }
            else{
                t_width.value=580; }

            let add_padd_g=t_td[t_td.length-1].style.paddingLeft;
            if(add_padd_g){
                add_padd=add_padd_g.slice(0, -2); } // 表末尾の「td」の padding
            else{
                add_padd=0; }
            td_padding_set();

            if(r_table.style.tableLayout=='fixed'){
                layout_fix='fixed'; }
            else{
                layout_fix='auto'; }
            lafix_set(3, r_table);

            let t_border_width_g=t_td[t_td.length-1].style.borderWidth;
            let t_border_width;
            if(t_border_width_g){
                t_border_width=t_border_width_g.replace(/[^0-9]/g, ''); } // 表末尾の「td」の border
            else{
                t_border_width=1; }
            let border_space_g=r_table.style.borderSpacing;
            if(border_space_g){
                border_space=border_space_g.replace(/[^0-9]/g, ''); }
            else{
                border_space=0; }
            if(border_space!=0){
                border_width.value=border_space*(-1); }
            if(border_space==0){
                border_width.value=t_border_width; }
            table_border_set();

            if(t_td[0].style.backgroundColor==''){ // 表先頭「td」の背景色指定の有無
                left_full=' tr:not(:first-child)'; }
            else{
                left_full=' tr'; }
            left_full_set();

            let t_border_color=t_td[t_td.length-1].style.borderColor; // 表末尾の「td」の border色
            if(t_border_color==''){
                t_border_color='#999'; }
            border_color.value=rgb_hex(t_border_color);
            sticky_color(border_color);

            let t_header_back=t_tr[0].style.backgroundColor; // 最初の「tr」の背景色
            if(t_header_back==''){
                t_header_back='#F4F4F4'; }
            header_back.value=rgb_hex(t_header_back);
            sticky_color(header_back);

            let t_left_back;
            if(t_tr.length>1){
                t_left_back=t_td[t_td.length / t_tr.length].style.backgroundColor; // 左端列 背景色 1
                if(t_left_back==''){
                    t_left_back='#F4F4F4'; }}
            else{
                t_left_back=t_td[0].style.backgroundColor; // 左端列 背景色 2
                if(t_left_back==''){
                    t_left_back='#F4F4F4'; }}
            left_back.value=rgb_hex(t_left_back);
            sticky_color(left_back);

            let t_cell_back=r_table.style.backgroundColor; // 表「r_table」の 背景色
            if(t_cell_back==''){
                t_cell_back='#FFF';}
            cell_back.value=rgb_hex(t_cell_back);
            sticky_color(cell_back);

            let t_font_size=r_table.style.fontSize;
            if(t_font_size==''){
                t_font.value='16'; }
            else{
                t_font.value=t_font_size.replace(/[^0-9]/g, ''); }

            let t_word_break=r_table.style.wordBreak; // 表「r_table」の word-break設定
            if(t_word_break=='break-all' || t_word_break=='break-word'){
                word_break=t_word_break; }
            else{
                word_break='unset'; }



            set.onclick=function(){
                if(task==3){
                    let t_tr=r_table.querySelectorAll('tr');
                    this_row=t_tr.length;
                    let t_td=r_table.querySelectorAll('td');
                    this_col=t_td.length / t_tr.length;
                    let insert=[];

                    let com_ok=0; // 行列の削除許可
                    if(row.value<this_row||col.value<this_col){
                        com_ok=1;
                        let ok=confirm(
                            "　🔴　行数または列数を減らす表更新が指定されています。\n"+
                            "　　 　行や列の削除で、中に記入したデータも削除されます。\n\n"+
                            "　　 　この削除を行ってもよいですか？");
                        if(ok){
                            com_ok=0; }
                        else{ ; }}

                    if(row.value>this_row){
                        for(let i=this_row; i<row.value; i++){
                            insert[i]=r_table.insertRow(-1); // 行の追加
                            for(let j=0; j<this_col; j++){
                                let cell=insert[i].insertCell(-1);
                                cell.appendChild(document.createTextNode('')); }}}
                    else if(row.value<this_row){
                        if(com_ok==0){
                            for(let i=this_row; i>row.value; i--){
                                insert[i]=r_table.deleteRow(-1); }}} // 行の削除

                    insert=r_table.querySelectorAll('tr');
                    for(let i=0; i<insert.length; i++){
                        if(col.value>this_col){
                            for(let j=this_col; j<col.value; j++){
                                let cell=insert[i].insertCell(-1);
                                cell.appendChild(document.createTextNode('')); }} // 列の追加
                        else if(col.value<this_col){
                            if(com_ok==0){
                                for(let j=this_col; j>col.value; j--){
                                    let cell=insert[i].deleteCell(-1); }}}} // 列の削除


                    r_table.setAttribute('style', set_css());

                    let first_tr=r_table.querySelectorAll('tr')[0];
                    if(first_tr){
                        first_tr.style.backgroundColor=header_back.value; }

                    let top_td=r_table.querySelectorAll('td')[0];
                    top_td.style.backgroundColor=''; // コーナーの「td」の背景をリセット
                    let left_td=r_table.querySelectorAll(left_full +' td:first-child');
                    for(let k=0; k<left_td.length; k++){
                        left_td[k].style.backgroundColor=left_back.value; }

                    let all_td=r_table.querySelectorAll('td');
                    for(let k=0; k<all_td.length; k++){
                        all_td[k].style.border=cell_border_width +'px solid '+ border_color.value;
                        all_td[k].style.padding='0.2em '+ add_padd +'em 0';
                        all_td[k].style.height='1.5em'; }


                    if(layout_fix=='fixed'){ //「Fix」モード時のtable幅適正化
                        let wpxt=document.querySelector('.wpxt'); // 表幅
                        if(!wpxt.classList.contains('lock')){ //「Fix」モードで幅可変
                            let top_td=r_table.querySelectorAll('tr:first-child td');
                            for(let k=0; k<top_td.length; k++){
                                let set_w=getComputedStyle(top_td[k]).width;
                                if(set_w && !top_td[k].style.width){
                                    top_td[k].style.width=set_w; }}}

                        t_width_lock(r_table);

                        r_table.style.width=''; // 表幅リセット
                        let t_width_g=getComputedStyle(r_table).width;
                        if(t_width_g){
                            t_width.value=Math.ceil((t_width_g.replace('px', ''))); } // 切り上げ
                        else{
                            t_width.value=580; }
                        r_table.style.width= t_width.value+'px'; }

                }} // set.onclick()

        } // table_renew()



        function copy_table(){
            copy.onclick=function(){
                if(task==3){
                    let yes=window.confirm(
                        "　🔵 選択した表の「設定」をコピーして\n"+
                        "　　  新規作成の表の初期値にします");
                    if(yes){
                        setting[1]=col.value;
                        setting[2]=row.value;
                        setting[3]=posit_set;
                        setting[4]=t_width.value;
                        setting[6]=add_padd;
                        setting[7]=border_width.value;
                        setting[8]=left_full;
                        setting[9]=border_color.value;
                        setting[10]=header_back.value;
                        setting[11]=left_back.value;
                        setting[12]=cell_back.value;
                        setting[13]=t_font.value;
                        setting[14]=layout_fix;
                        setting[15]=word_break;

                        write_locals(setting); }}}} // ストレージ 保存

    } // edit_table()



    function set_css(){
        let t_width=document.querySelector('#t_width'); // 表全幅の設定
        let border_color=document.querySelector('#border_color'); // 枠線色の設定
        let cell_back=document.querySelector('#cell_back'); // 全体背景色の設定
        let t_font=document.querySelector('#t_font'); // 文字サイズの設定

        let css=
            'width: '+ t_width.value +'px; '+
            'margin: '+ table_position +'; '+
            'table-layout: '+ layout_fix +'; '+
            'border-collapse: '+ border_collapse +'; '+
            'border-spacing: '+ border_space +'px; '+
            'border: '+ table_border_width +'px solid '+ border_color.value +'; '+
            'font: normal '+ t_font.value +'px Meiryo; '+
            'background-color: '+ cell_back.value +'; '+
            'word-break: '+ word_break +'; ';

        return css; }



    function new_table_id(){ // 複数tableを生成時に異なるidを付ける
        if(document.querySelector('.cke_wysiwyg_frame') !=null){
            let editor_iframe=document.querySelector('.cke_wysiwyg_frame');
            let iframe_doc=editor_iframe.contentWindow.document;
            for(let k=0; k<100; k++){
                let table_id='ambt'+k;
                if(iframe_doc.getElementById(table_id)==null){
                    return table_id; }}}}



    function remove_t_panel(){
        document.querySelector('#t_panel').remove(); }



    function remove_mark(){
        if(document.querySelector('.cke_wysiwyg_frame') !=null){ //「通常表示」から実行開始
            let editor_iframe=document.querySelector('.cke_wysiwyg_frame');
            let iframe_doc=editor_iframe.contentWindow.document;

            let active_item=iframe_doc.querySelectorAll('.amb_active');
            for(let k=0; k<active_item.length; k++){
                active_item[k].classList.remove('amb_active'); }}}



    function remove_mark_trim(){
        if(document.querySelector('.cke_wysiwyg_frame') !=null){ //「通常表示」から実行開始
            let editor_iframe=document.querySelector('.cke_wysiwyg_frame');
            let iframe_doc=editor_iframe.contentWindow.document;

            let active_trimr=iframe_doc.querySelectorAll('.trimr_active');
            for(let k=0; k<active_trimr.length; k++){
                active_trimr[k].classList.remove('trimr_active'); }

            let active_trimd=iframe_doc.querySelectorAll('.trimd_active');
            for(let k=0; k<active_trimd.length; k++){
                active_trimd[k].classList.remove('trimd_active'); }

            let active_trim=iframe_doc.querySelectorAll('.trim_active');
            for(let k=0; k<active_trim.length; k++){
                active_trim[k].classList.remove('trim_active'); }}}



    function remove_mark_col(){
        if(document.querySelector('.cke_wysiwyg_frame') !=null){ //「通常表示」から実行開始
            let editor_iframe=document.querySelector('.cke_wysiwyg_frame');
            let iframe_doc=editor_iframe.contentWindow.document;

            let active_col=iframe_doc.querySelectorAll('.col_active');
            for(let k=0; k<active_col.length; k++){
                active_col[k].classList.remove('col_active'); }}}



    function remove_mark_all(){
        remove_mark();
        remove_mark_trim();
        remove_mark_col(); }



    function show_first(n){
        let first=document.querySelector('#first');
        let bt_help1=document.querySelector('.bt_help1');
        let bt_help2=document.querySelector('.bt_help2');
        let bt_help3=document.querySelector('.bt_help3');
        let bc_help4=document.querySelector('.bc_help4');
        if(first){
            if(n==0){
                first.style.display='none'; }
            else{
                first.style.display='block';
                bt_help1.style.display='none';
                bt_help2.style.display='none';
                bt_help3.style.display='none';
                bc_help4.style.display='none';
                if(n==1){
                    bt_help1.style.display='block'; }
                if(n==2){
                    bt_help2.style.display='block'; }
                if(n==3){
                    bt_help3.style.display='block'; }
                if(n==4){
                    bc_help4.style.display='block'; }}}

        let bt_help=document.querySelector('#bt_help');
        if(bt_help){
            bt_help.onclick=function(){
                let url='https://ameblo.jp/personwritep/entry-12703182424.html';
                window.open(url, target="_blank"); }}}



    function equal_color(R, G, B, A){ // RGBは整数 Aは小数が必須 ➔ 等価 6桁hexコードに変換
        return '#'
            + tohex(upColor(R, A))
            + tohex(upColor(G, A))
            + tohex(upColor(B, A));

        function upColor(value, A){
            let color_value=value*A + 255*(1 - A);
            return Math.floor(color_value); }

        function tohex(value){
            return ('0'+ value.toString(16)).slice(-2); }}



    function hex_bright(hex){ // 明度を段階的に変換
        if(hex.slice(0, 1)=='#'){
            hex=hex.slice(1); }
        if(hex.length==3){
            hex=hex.slice(0,1) + hex.slice(0,1) + hex.slice(1,2) + hex.slice(1,2) +
                hex.slice(2,3) + hex.slice(2,3); }
        // 透過度 0.6 とした色値に変更
        let R=parseInt(hex.slice(0, 2), 16);
        let G=parseInt(hex.slice(2, 4), 16);
        let B=parseInt(hex.slice(4, 6), 16);

        return equal_color(R, G, B, 0.6); } // 非透過色値に変更



    function hex_8_6(hex){ // 8桁hex値を6桁hexに変換
        if(hex.length!=9 || hex.slice(0, 1)!='#'){
            return hex; }
        else{
            hex=hex.slice(1);

            let R=parseInt(hex.slice(0, 2), 16);
            let G=parseInt(hex.slice(2, 4), 16);
            let B=parseInt(hex.slice(4, 6), 16);
            let A=hex.slice(6, 8);
            // 16進の「A値」を透過度（小数）に変更
            let alp=0;
            for(let i=0; i<2; i++){
                alp +=Math.pow(16, -(i + 1))*parseInt(A[i], 16); }

            return equal_color(R, G, B, alp); }} // 非透過色値に変更



    function rgb_hex(color){ // rgb or rgba 表記をhex6桁表記に変換
        if(color.includes('#')){ // hex表記の場合
            return color; }
        else{ // rgb表記の場合
            color=color.split('(')[1].split(')')[0].replace(/ /g, '');
            let rgb_ar=color.split(',');

            let R=parseInt(rgb_ar[0], 10);
            let G=parseInt(rgb_ar[1], 10);
            let B=parseInt(rgb_ar[2], 10);
            let A;
            if(rgb_ar.length==3){
                A=1; }
            else if(rgb_ar.length==4){
                A=parseFloat(rgb_ar[3]); }

            return equal_color(R, G, B, A); }} // 非透過色値に変更



    function before_end(){
        let submitButton=document.querySelectorAll('.js-submitButton');
        submitButton[0].addEventListener('mousedown', all_clear, false);
        submitButton[1].addEventListener('mousedown', all_clear, false);

        function all_clear(){
            let editor_iframe=document.querySelector('.cke_wysiwyg_frame');
            if(!editor_iframe){ //「HTML表示」編集画面の場合
                alert("⛔　Blog Table が処理を終了していません\n\n"+
                      "　　 通常表示画面に戻り 編集を終了してください");
                event.stopImmediatePropagation();
                event.preventDefault(); }
            if(editor_iframe){ //「通常表示」編集画面の場合
                remove_mark_all(); } // table編集・TRIM・COLのマークを削除
        }} // before_end(

} // main()
